	1、传统开发项目（不使用Maven）时的问题
		1）有很多模块，模块之间有关系，手工管理关系比较繁琐
		2）需要许多第三方功能，需要很多jar包，需要手动获取
		3）需要管理jar包的版本
		4）需要手动管理jar文件之间的依赖
	2、使用Maven时
		1）可以管理jar文件
		2）自动下载jar及其文档，源代码
		3）自动管理jar文件之间的依赖
		4）自动管理jar的版本
		5）帮助编译程序，把java编译为class
		6）帮助测试代码是否正确
		7）帮助打包文件，形成jar文件，或者war文件
		8）帮助部署项目
	3、项目的构建：
		1）构建是面向过程的
		2）Maven支持的构建有：
			a、清理：把之前项目编译的东西删除掉，为新的编译代码做准备
			b、编译：把程序源代码编译为可执行代码（java.class），这个过程是批量的，Maven可以同时编译多个文件
			c、测试：Maven可以执行测试程序代码，来验证功能是否正确，也是批量进行的
			d、报告：生成测试结果的文件，测试是否通过
			e、打包：把项目中所有的class文件、配置文件等所有资源放到一个压缩文件中，这个压缩文件就是项目的结果文件，对于java程序，压缩文件是jar类型，对于web应用，压缩文件是war类型
			f、安装：把打包后的文件（jar、war）安装到本机仓库
			g、部署：把程序安装好就可以执行
	4、Maven核心概念：
		1）POM：一个文件，名字是pom.xml，控制Maven构建项目的过程
		2）约定的目录结构：Maven项目的目录和文件的位置都是规定的
		3）坐标：是一个唯一的字符串，用来表示资源
		4）依赖管理：管理你的项目可以使用jar文件
		5）仓库管理：资源存放的位置
		6）生命周期：Maven工具构建项目的过程就是一个生命周期
		7）插件和目标：执行Maven构建的时候使用的工具就是插件
		8）继承
		9）聚合
	5、Maven的约定目录结构：大家都遵循的一个规则
		每一个Maven的项目在磁盘中都是一个文件夹
			项目/
				--/src
					--/main（放主程序的java代码和配置文件）
						--/java（程序包和包中的java文件）
						--/resources（java程序中要使用的配置文件）
					--/test（放测试程序使用到的文件和代码）可以没有
						--java（测试程序包和包中的java文件）
						--resources（测试java程序需要使用的配置文件）
				--/pom.xml（Maven的核心文件，每个Maven都必须有）
