	1、分布式框架
		分布式系统是若干独立系统的集合,但是用户使用起来像是在使用一套系统
		
	2、规模的逐步扩大和业务的复杂,单台计算机无法满足需求
	
	3、单一架构 : 当网站流量很小的时候,我们将所有的应用(业务)放在一台服务器上
		优点 : 开发简单,部署简单
		缺点 : 扩展不容易,维护不容易,性能提升难
	
	4、垂直应用架构 : 将大应用拆分为小应用(一般按照业务拆分),根据不同的频率决定各自部署的服务器数量
		优点 : 扩展容易
		缺点 : 页面一改,可能造成整个项目重新部署,业务和界面没有分离,随着业务种类增加,怎么解决业务之间的互相调用问题,订单服务器和用户服务器交互效率的问题
		
	5、分布式架构(基于RPC(Remote Procedure Call) : 远程过程调用)
		将业务拆分后,用某种方式实现各个业务模块之间的远程调用和复用
		优点 : 解决了分布式系统中互相调用的问题
	
	6、Dubbo高性能RPC框架 : 
		RPC的主要职责就是远程过程(方法)调用,提升性能的两个关键点就是 : 序列化和网络通信
		序列化 : 本地的对象要在网络上进行传输,必须要实现Serializable接口,也就是序列化.
			实现序列化的方案有很多 : xml、json、二进制流(效率最高)...
		网络通信 : 不同于HTTP需要进行7步走(三次握手和四次挥手),Dubbo采用Socket通信机制,一步到位
		
	7、Dubbo概述 : 
		Apache Dubbo(incubating) : 是一款高性能、轻量级的开源Java RPC框架,它提供了三大核心功能 : 面向接口的远程方法调用、智能容错和负载均衡,以及服务自动注册和发现
	
	8、Dubbo支持的协议 : 
		dubbo、hessian、rmi、http、webservice、thirft、memcached、redis
		dubbo官方推荐使用dubbo协议,dubbo协议默认端口号20880
		
	9、dubbo服务化最佳实践
		1) 分包
			建议将服务接口、服务模型等均放在公共包中
		2) 粒度
			a、服务接口尽可能大粒度,每个服务方法应代表一个功能,而不是某个功能的一个步骤
			b、服务接口应尽可能以业务场景为单位划分,并对相近业务做抽象,防止接口数量爆炸
			c、不建议使用过于抽象的通用接口,如 : Map query(Map),这样的接口没有明确语义,会给后期维护带来不便
		3) 版本
			每个接口都应定义版本号,区分同一接口的不同实现
			如 : <dubbo:service interface="com.xxx.XxxService" version="1.0"/>
	
	10、dubbo常用标签 : 
		Dubbo中常用的标签分为三个类别 : 公用标签、服务提供者标签、服务消费者标签
		a、公用标签
			<dubbo:application/> 和 <dubbo:registry/>
			配置应用信息 : 
				<dubbo:application name="服务的名称(唯一)"/>
			配置注册中心 :
				<dubbo:registry address="ip:port" protocol="协议"/>
		b、服务提供者标签
			配置暴露的服务
				<dubbo:service interface="服务接口名" ref="服务实现对象 bean"/>
		c、服务消费者标签
			配置服务消费者引用远程服务
				<dubbo:reference id="服务引用bean的id" interface="服务接口名"/>
				
	11、注册中心概述 --- Zookeeper
		a、注册中心概述 ： 
			对于服务提供方，他需要发布服务，而且由于应用系统的复杂性，服务的数量、类型也不断膨胀；
			对于服务消费方，他最关心如何获取到他需要的服务，而面对复杂的应用系统，需要管理大量的服务调用
			而且，对于服务提供方和消费方来说，他们还有可能兼具两种角色，即既需要提供服务，又需要消费服务。通过将服务统一管理起来，可以有效地优化内部应用对服务发布/使用
			的流程和管理。服务注册中心可以通过特定协议来完成服务对外的统一。
			Dubbo提供以下几种类型的注册中心 ： 
				Multicast注册中心 ： 组播方式
				Redis注册中心 ： 使用Redis作为注册中心
				Simple注册中心 : 就是一个dubbo服务，作为注册中心，提供查找服务的功能
				Zookeeper注册中心 : 使用Zookeeper作为注册中心（Dubbo官方推荐）
		b、Zookeeper注册中心
			Zookeeper是一个高性能的,分布式的,开放源码的分布式应用程序协调服务.简称zk.
			Zookeeper(动物管理员),可以理解为windows中的资源管理器或者注册表.
			它是一个树形结构,这种树形结构和标准文件系统相似.Zookeeper树中的每个节点被称为Znode.和文件系统的目录树一样,Zookeeper书中的每个节点可以拥有子节点.
				每个节点表示一个唯一服务资源.Zookeeper运行需要java环境
				
	12、dubbo的配置 : 
		通常由服务提供者配置访问参数,因为,服务提供者更了解服务的各种参数
		a、关闭检查 : 
			dubbo缺省会在启动时检查依赖的服务是否可用,不可用时会抛出异常,阻止Spring完成初始化.
			默认check=true.通过check="false"关闭检查.
			例1 : 关闭某个服务启动时的检查
				<dubbo:reference interface="com.foo.BarService" check="false"/>
			例2 : 关闭注册中心启动时的检查
				<dubbo:registry check="false"/>
				默认启动服务时检查注册中心存在并已运行,若注册中心未启动,则会报错
		b、重试次数
			消费者访问提供者,如果访问失败,则切换重试访问其他服务器,但重试会带来更长延迟.访问时间变长,用户的体验较差.但多次访问服务器可能会成功.
			通过retries="2"来设置重试次数(不含第一次)
		c、超时时间
			由于网络或者服务端不可靠,会导致调用出现一种不确定的中间状态(超时).为了避免超时导致客户端资源(线程)挂起耗尽,必须设置超时时间.
			timeout:调用远程服务超时时间(毫秒)
			dubbo消费端 : 
				指定接口超时配置
					<dubbo:reference interface="com.foo.BarService" timeout="2000"/>
			dubbo服务提供端 : 
					<dubbo:service interface="com.foo.VarService" timeout="2000"/>
					
	13、版本号
		每个接口都应该定义版本号,为后续不兼容升级提供可能.当一个接口有不同的实现,项目早期使用的一个实现类,之后创建新的实现类.区分不同的实现类使用版本号
		
	14、监控中心
		a、Dubbo的使用,其实只需要有注册中心,消费者,提供者这三个就可以使用了,但是并不能看到有哪些消费者和提供者.
			为了更好地调试和发现问题,因此引入dubbo-admin.通过dubbo-admin可以对消费者和提供者进行管理.可以在dubbo应用部署做动态的调整,服务的管理.
			
			dubbo-admin
			图形化的服务管理页面;安装是需要指定注册中心地址,即可从注册中心获取到所有的提供者和消费者并进行配置管理
			
			dubbo-monitor-simple
			简单的监控中心
			
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		