	1、EL工具包：
		1）由JAVA技术开发的一个jar包，
		2）作用是降低JSP文件开发时Java命令强度
		3）Tomcat服务器本身自带了EL工具包（Tomcat安装地址/lib/el-api.jar）
	2、EL表达式：
		a、命令格式：
			${作用于对象别名.共享数据}
		b、命令作用：
			1）EL表达式是EL工具包提供的一种特殊命令格式【表达式命令格式】
			2）EL表达式在JSP文件上使用
			3）负责在JSP文件中从作用域对象中读取指定的共享数据并输出到响应体中
	3、EL表达式中作用域对象的别名
		a、JSP文件可以使用的作用域对象：
			1）ServletContext application：全局作用域对象
			2）HttpServlet session：会话作用域对象
			3）HttpServletRequest request：请求作用域对象
			4）PageContext pageContext（存在于JSP包中）：当前页作用域对象，这是JSP文件独有的对象，在Servlet中不存在。在当前页作用域对象中存放的共享数据仅能在当前JSP文件中使用，不能共享给其他的Servlet或者JSP文件。在真实开发过程中，主要用于JSTL标签与JSP文件之间的数据共享。
			JSTL------>PageContext------------->JSP
		b、EL表达式中提供的作用域对象别名：
			JSP	EL表达式
			application	${applicationScope.共享数据名}
			session	${sessionScope.共享数据名}
			request	${requestScope.共享数据名}
			pageContext	${pageScope.共享数据名}
		c、EL表达式将引用对象属性写入到响应体：
			1）命令格式：${作用域对象.共享数据名.属性名}
			2）命令作用：从作用域对象读取指定共享数据关联的引用对象的属性值，并自动将属性的结果写入响应体
			3）属性名：一定要和引用类型中的属性名完全一致（包括大小写）
			4）EL表达式没有提供遍历集合的方法，因此无法从作用域对象读取集合内容输出
		d、EL表达式简化版：
			1）命令格式：${共享数据名}
			2）命令作用：EL表达式允许开发人员开发时省略作用域对象的别名
			3）工作原理：
				EL表达式简化版由于没有指定作用域对象，所以在执行的时候采用【猜】的算法
				首先到【pageContext】定位共享数据，如果存在，那么直接读取输出，并结束执行；如果在【pageContext】中不存在，那么到【request】中定位共享数据，如果存在，那么直接读取输出，并结束执行；
				如果在【request】中也不存在，那么到【session】中定位共享数据，如果存在，那么直接读取输出，并结束执行；
				如果【session】中也不存在，那么到【application】中定位共享数据，如果存在，那么直接读取输出，并结束执行；
				如果【application】中也不存在，那么返回null；
				pageContext-------->request------>session-------->application
			4）存在隐患：
				降低程序执行速度
				导致数据的定位错误
			5）引用场景：
				设计目的，就是简化从pageContext中读取共享数据并输出的难度
			6）EL表达式简化版尽管存在很多隐患，但是在实际开发过程中，开发人员为了节省时间，一般都使用Elaborate表达式简化版
	4、EL表达式----------支持运算表达式
		a、前提：
			在JSP文件中有时需要将读取出的共享数据进行一番运算之后，将运算结果写入到响应体中
		b、支持的运算表达式：
			1）数学运算
			2）关系运算：
				<	gt
				>=	ge
				==	eq
				<	lt
				<=	le
				!=	!=
			3）逻辑运算：&&、||、!
	5、JSP一般不做复杂的运算，一般只做输出。
	6、EL表达式提供内置对象
		1）
			a、命令格式：
				${param.请求参数名}
			b、命令作用：
				从当前请求对象中读取当前请求包中请求参数的内容，并将请求参数内容写入到响应体
		2）
			a、命令格式：
				${paramValues.请求参数名【下标】}
			b、命令作用：
				如果浏览器发送的请求参数是一个请求参数关联多个值，此时可以通过param.values读取到请求参数下指定位置的值，并写入到响应体
