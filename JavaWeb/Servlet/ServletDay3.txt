	1、欢迎资源文件
		a、前提：
			用户可以记住网站的名字，但不会记住资源文件的名字
		b、默认欢迎资源文件：
			用户向Http服务器发送了针对某个网站的【默认请求】，此时由Http服务器自动从当前网站返回响应资源文件
			正常请求：http：//localhost：8080/myWeb/index.html
			默认请求：http：//localhost：8080/myWeb/
		c、Tomcat对于默认欢迎资源文件的定位规则：
			1）规则位置：Tomcat安装位置/conf/web.xml
			2）规则命令：若下面三个文件都不存在，则返回404 not found
				<welcome-file-list>
						<welcome-file>index.html</welcome-file>
						<welcome-file>index.htm</welcome-file>
						<welcome-file>index.jsp</welcome-file>
				</welcome-file-list>
		d、设置当前网站的默认欢迎资源文件规则
			1）规则位置：网站/web/WEB-INF/web.xml
			2）规则命令：
				<welcome-file-list>
						<welcome-file>login.html</welcome-file>
				</welcome-file-list>
			3）网站设置了自定义的默认欢迎文件规则后，此时Tomcat自带的默认欢迎文件规则会失效。
	2、Http状态码
		a、介绍：
			1）由三位数字组成的一个符号
			2）Http服务器在推送响应包之前，根据本次请求处理情况，将Http状态码写入到响应包中的【状态行】上
			3）如果Http服务器针对本次的请求返回对应的资源文件，其中通过Httt状态码通知浏览器应该如何处理这个结果
			如果Http服务器针对本次请求无法返回响应资源文件，那么可以通过状态码向浏览器解释不能提供服务的原因
		b、分类：
			1）组成：100-----599（总共600）分为5个大类
			2）1xx：
				代表：
					100---通知浏览器本次返回的资源文件并不是一个独立的资源文件，需要浏览器在接收到响应包后继续向Http服务器索要其依赖的其他资源文件
			3）2xx：
				代表：
					200---通知浏览器本次返回的资源文件是一个完整的资源文件
			4）3xx：
				代表：
					302---通知浏览器本次返回的不是一个资源文件的内容，而是一个资源文件的地址，需要浏览器根据这个地址发起请求来索要这个资源文件
					response.sendRedirect（”资源文件地址“）把这个地址写入响应头中（location）
			5）4xx：
				代表：
					404---通知浏览器由于在服务端没有定位到被访问的资源文件，因此无法提供帮助。
					405---通知浏览器，在服务端已经定位到被访问的资源文件（Servlet），但是这个Servlet对于浏览器所发送的请求方式不能处理
			6）5xx：
				代表：
					500---通知浏览器，在服务端已经定位到了被访问的资源文件（Servlet）
					这个Servlet可以接受浏览器所采用的请求方式，但是Servlet在处理请求期间由于Java异常导致处理失败
	3、多个Servlet之间的调用规则
		a、前提条件：
			某些来自浏览器的请求，往往需要服务端的多个Servlet协同处理，但是浏览器一次只能访问一个Servlet，导致用户需要手动通过浏览器发起多次请求才能得到服务。这样就增加了用户获得服务的难度，导致用户放弃访问当前网站
		b、提高用户使用感受的规则：
			无论本次请求涉及到多少个Servlet，用户只需要手动通知浏览器一次请求即可
		c、多个Servlet之间的调用规则：
			1）重定向解决方案
			2）请求转发解决方案
	4、重定向解决方案：
		a、工作原理：
			用户第一次通过【手动方式】通知浏览器访问Servlet。第一个Servlet工作完成之后，将第二个Servlet的地址写入到响应头中的location属性中，导致Tomcat将302状态码写入到状态行中；浏览器接收到响应包后，会读取到302状态码，浏览器就会根据响应头中的location属性，对其中的地址（第二个Servlet）发起请求。
		b、实现命令 ：
			response.sendRedirect（“请求地址”）
		c、特征：
			1）请求地址：
				即可以把当前网站内部的资源文件地址（/网站名/资源文件名）发送给浏览器，也可以把其他网站资源文件地址（http：//ip地址：端口号/网站名/资源文件名）发送给浏览器
			2）请求次数：
				浏览器至少发送两次请求，但是只有第一次是用户自己手动发送的，后续请求都是浏览器自动发送的
			3）请求方式：
				在重定向的过程中，是通过通知浏览器下一个Servlet的地址的方式发起下一次请求的，所以通过重定向解决方案调用的资源文件接收的请求方式一定是【GET】。
			4）缺点：
				重定向解决方案需要在浏览器与服务器之间进行多次往返，大量时间消耗在往返过程中，增加用户的等待时间
	5、请求转发解决方案：
		a、原理：
			用户第一次通过手动方式请求浏览器访问第一个Servlet，第一个Servlet工作完之后，通过当前的请求对象代替浏览器向Tomcat发送请求，申请调用第二个Servlet，Tomcat在接收到这个请求后会自动调用第二个Servlet完成余下的任务
		b、实现命令：
			请求对象代替浏览器向Tomcat发送请求
			1）通过当前的请求对象生成一个资源文件申请报告对象
				RequestDispatcher report = request.getRequestDispatcher（“/资源文件名”）；
			2）将报告对象发送给Tomcat
				report.forward（当前的请求对象，当前的响应对象）
		c、优点：
			1）无论本次请求涉及到多少个Servlet，用户只需要手动通过浏览器发送一次请求
			2）Servlet之间的调用是发生在服务端计算机上的，节省服务端与浏览器之间的往返次数，增加处理服务的速度
		d、特征：
			1）请求次数：
				在请求转发的过程中，浏览器只需要发送一次请求
			2）请求地址：
				只能向Tomcat来申请调用当前网站下的资源文件，所以
				request.getRequestDispatcher（“/当前网站的资源文件名”）
			3）请求方式：
				在请求转发的过程中，浏览器之发送了一个Http请求协议包，参与本次请求的所有Servlet将共享这一个Http请求协议包，因此，这些Servlet接收的请求方式与浏览器发送的方式一致
	6、多个Servlet之间数据共享的实现方案：
		a、数据共享：
			第一个Servlet工作完毕之后，产生的数据交给第二个Servlet继续使用
		b、Servlet规范中提供了4种数据共享的方案：
			1）ServletContext接口
			2）Cookie类
			3）HttpSession接口
			4）HttpServletRequest接口
	7、ServletContext接口：
		a、介绍：
			1）是来自于Servlet规范中的一个接口，在Tomcat中保存在servlet-api.jar包中
			在Tomcat中负责提供这个接口实现类
			2）如果两个Servlet来自于同一个网站，那么他们彼此之间就可以通过网站中的ServletContext实例对象实现数据共享
			3）开发人员习惯于将ServletContext称为【全局作用域对象】
		b、工作原理：
			每一个网站都存在一个全局作用域对象，这个全局作用域对象相当于一个Map集合，在当前网站中第一个Servlet可以将一个数据写入全局作用域对象中，那么其他的Servlet都可以从全局作用域对象中得到第一个Servlet的数据
		c、全局作用域对象的生命周期：
			1）在Http服务器启动的过程中自动的为当前网站在内存中创建一个全局作用域对象
			2）在Http服务器运行过程中，一个网站中只有一个全局作用域对象
			3）在Http服务器运行期间，全局作用域对象一直存活
			4）在Http服务器准备关闭时，Http服务器会负责将当前网站中的全局作用域对象销毁处理
			全局作用域对象的生命周期贯穿网站的整个运行期间
		d、相关的命令：【同一个网站】
			第一个Servlet：
				1）通过请求对象向Tomcat索要当前网站中的全局作用域对象
					ServletContext application = request.getServletContext（）；
				2）将数据添加到全局作用域对象中作为共享数据
					application.setAttribute（“key”，“value”）；
			第二个Servlet：
				1）通过请求对象向Tomcat索要当前网站中的全局作用域对象
					ServletContext application = request.getServletContext（）；
				2）从全局作用域对象中通过关键字取出具体的值
					Object value = application.getAttribute（“key”）；
