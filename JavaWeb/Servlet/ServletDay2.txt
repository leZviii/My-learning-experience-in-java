	1、Servlet规范：
		1）servlet规范是一种JAVAEE规范
		2）作用：
			a、在Servlet规范中，指定【动态资源文件】的开发步骤
			b、在Servlet规范中，指定Http服务器调用动态资源文件的规则
			c、在Servlet规范中，指定Http服务器管理动态资源文件实例对象的规则
	2、Servlet接口实现类：
		1）Servlet接口是一个来自于Servlet规范下的一个接口，这个接口存在于Http服务器提供的jar包下
		2）Tomcat服务器下lib文件有一个servlet-api.jar存放servlet接口（javax.servlet.Servlet）
		3）Servlet规范中，Http服务器能调用的动态资源文件必须是一个Servlet接口的实现类
	3、Servlet接口实现类的开发步骤：
		1）创建一个java类继承于HttpServlet父类，使之成为一个Servlet接口实现类
			Servlet接口实现类--->（abstract）HttpServlet--->（abstract）GenericServlet--->Servlet（接口）
		2）重写HttpServlet父类中的两个方法：doGet（）、doPost（）
		3）将Servlet接口实现类注册到Tomcat服务器上：
			【网站】-->【Web】-->【Web-INF】-->【Web.xml】
			在Web.xml文件中：
				<！--将servlet接口实现类的路径交给Tomcat-->
				<servlet>
					<servlet-name>自定义的名字</servlet-name>  <！--声明一个变量存储servlet接口实现类的类路径-->
					<servlet-class>当前创建的网站的路径</servlet-class>  <！--servlet接口实现类路径-->
				</servlet>
				<！--为了降低用户访问Servlet接口实现类的难度，需要给请求设置简短的别名-->
				<servlet-mapping>
					<servlet-name>自定义的名字</servlet-name>
					<url-pattern>/别名</url-pattern><！--设置简短的别名，别名必须以/开头-->
				</servlet-mapping>
	4、Tomcat根据Servlet规范调用Servlet接口实现类规则：
		1）Tomcat创建Servlet接口实现类实例对象
		2）Tomcat根据实例对象调用service（）方法处理当前请求（service（）在HttpServlet父类中重写，直接调用即可），service（）方法可以决定在何种情况下调用doGet（）或者doPost（）方法
			这种通过父类方法来决定在何种情况下调用子类方法的模式我们称之为【模板设计模式】
	5、Servlet对象的生命周期：
		1）在一个网站中，所有的Servlet接口实现类的实例对象只能由Http服务器负责创建，开发人员不能手动创建Servlet接口实现类的实例对象。
		2）在默认情况下，Http服务器只有接收到当前Servlet接口实现类的第一次请求时，才会自动创建这个Servlet接口实现类的实例对象。
		3）在手动配置情况下，要求Http服务器在启动时自动创建Servlet接口实现类的实例对象
			<servlet>
				<servlet-name></servlet-name>
				<servlet-class></servlet-class>
				<load-on-startup></load-on-startup><!--在这里填写一个大于0的整数，这样在启动时Http服务器就会创建对象-->
			</servlet>
		4）Http服务器运行期间，一个Servlet接口实现类只能被创建出一个实例对象
		5）在Http服务器关闭时刻，自动将网站中所有的Servlet对象进行销毁
	6、HttpServletResponse接口
		a、
			1）HttpServletResponse接口来自于Servlet规范中，在Tomcat中的Servlet-api.jar包中
			2）HttpServletResponse接口的实现类由Http服务器负责提供
			3）HttpServletResponse接口主要负责doGet（）/doPost（）方法执行结果写入到响应体（在Http响应协议包中）交给服务器
			4）HttpServletResponse接口修饰的对象被称为【响应对象】
		b、主要功能：
			1）将执行结果以二进制的形式写入到响应体中
			intmoney=50;
			PrintWriterprintWriter=response.getWriter();
			printWriter.write(money);/printWriter.print(money);
			2）设置响应头中的【content-type】属性值，控制浏览器使用对应的编译器将响应体中的二进制结果编译处理为【文字、图片、视频、命令】
			response.setContentType("text/html;charset=utf-8");
			3）设置响应头中的【location】属性，讲一个请求地址赋值给location，从而控制浏览器向指定的服务器发送请求。
			Stringresult="http://www.baidu.com?username=mike";
			response.sendRedirect(result);
	7、HttpServletRequest
		a、
			1）HttpServletRequest接口来自于Servlet规范中，在Tomcat中的Servlet-api.jar包中
			2）HttpServletRequest接口的实现类由Http服务器负责提供
			3）HttpServletRequest接口负责在doGet（）/doPost（）方法运行时读取Http请求协议包中的信息
			4）HttpServletRequest修饰的对象被称为【请求对象】
		b、作用：
			1）可以读取Http请求协议包中【请求行】的信息
			Stringurl=request.getRequestURL().toString();
			//URI：资源文件精准定位地址，在请求行中并没有URI这个属性，
			//实际上URI是从URL中截取出的一个字符串，格式：“/网站名/资源文件名”
			//URI用于Http服务器对要被访问的资源文件进行定位
			Stringuri=request.getRequestURI();
			Stringmethod=request.getMethod();
			2）可以读取保存在Http请求协议包中【请求头】或者【请求体】中的请求参数信息
			response.setContentType("text/html;charset=utf-8");
			PrintWriterprintWriter=response.getWriter();
			//将【请求头】中的所有参数保存到一个枚举对象中(这里是参数的名字)
			EnumerationparaNames=request.getParameterNames();
			while(paraNames.hasMoreElements()){
			StringparaName=paraNames.nextElement().toString();
			//这里可以获得参数的值
			Stringvalue=request.getParameter(paraName);
			printWriter.print("请求参数："+paraName+"value:"+value+"<br>");
			}
			
			response.setContentType("text/html;charset=utf-8");
			PrintWriterprintWriter=response.getWriter();
			/*
			当我们以POST方式发送中文时，会得到乱码
			原因：浏览器以GET方式发送请求，请求参数保存在请求头中，Http请求协议包到达Http服务器后的第一件事就是解码
			请求头中的二进制数据由Tomcat负责解码，Tomcat9.0默认使用【utf-8】字符集
			浏览器以POST发送请求，请求参数保存在请求体中,Http请求协议包到达Http服务器后的第一件事就是解码
			请求体中的二进制数据由请求对象（request）负责解码，request默认使用【ISO-8859-1】字符集，一个东欧语系字符集
			无法识别中文。
			解决方案:在POST请求方式下，在读取请求体的内容之前，通知请求对象使用utf-8字符集
			*/
			request.setCharacterEncoding("utf-8");
			StringuserName=request.getParameter("userName");
			printWriter.print("userName(POST方式):"+userName);
			3）可以代替浏览器向Http服务器申请资源文件调用
	8、请求对象和响应对象的生命周期
		1）在Http服务器（Tomcat）接收到浏览器发送的【Http请求协议包】之后，自动为当前的【Http请求协议包】生成一个【请求对象】和【响应对象】
		2）在Http服务器（Tomcat）调用doGet/doPost方法时，负责将【请求对象】和【响应对象】作为实参传递到doGet/doPost方法中，确保doGet/doPost方法正确执行
		3）在Http服务器（Tomcat）准备推送Http响应协议包之前，负责将本次请求关联的【请求对象】和【响应对象】进行销毁处理
		----【请求对象】和【响应对象】的生命周期贯穿一次请求的处理过程，请求处理结束，【请求对象】和【响应对象】立即消失。

