	1、请求转发和重定向：
		1）forward：
			a、forward和redirect都是关键字，有一个共同的特点就是不和视图解析器一起工作
			b、forward可以在使用视图解析器的情况下访问其他路径下的文件（视图）
		2）redirect：
			a、框架会把model中的简单数据类型的数据，转为String类型的数据，并作为请求参数传递给下一个请求对象
			b、在下一个请求对象中可以使用参数集合对象${param.xxx}来获取这些参数
			c、重定向不能访问WEB-INF目录下的文件
	
	2、框架中的异常处理：
		1）SpringMVC采用的异常处理机制是一种统一的、全局的异常处理，把Controller中所有的异常处理都集中到一个地方
		2）SpringMVC的异常处理机制体现了AOP的思想，实现了业务逻辑和异常处理的解耦合
		3）SpringMVC的异常处理主要采用两个注解：
			a、@ExceptionHandler：
				和控制方法的定义一样，可以有多个参数，可以有多种返回值
				形参:Exception，表示Controller中抛出的异常对象，可以通过Exception获得异常信息
			b、@ControllerAdvice:
				作用：控制器增强（给控制器类增加功能---异常处理功能）
				位置：在类的上面
				特点：必须让框架知道这个注解所在的包名（需要在SpringMVC配置文件中加入扫描器）
		4）异常处理步骤：	
			a、创建一个普通类作为全局异常处理类：
				1）在类的上面加入@ControllerAdvice
				2）在类中定义方法，方法的上面加上@ExceptionHandler：
					异常处理逻辑：
						a、需要把异常记录下来，记录到数据库的日志文件中，记录异常的发生时间，哪个方法发生的，异常的错误信息
						b、把异常的信息通过邮件、短信、微信发送给相关人员
						c、给用户友好的提示
			b、创建异常处理的视图页面
			c、在SpringMVC的配置文件中加入：
				1）组件扫描器，扫描@ControllerAdvice所在的包名
				2）声明注解驱动
				
	3、SpringMVC中的拦截器：
		1）拦截器是SpringMVC中的一种需要实现HandlerInterceptor接口的类
		2）拦截器和过滤器类似，功能方向侧重点不同，过滤器是用来完成过滤请求参数、设置字符集等工作
			拦截器是用来拦截用户的请求，做请求处理判断的
		3）拦截器的特点：
			a、拦截器是全局的，可以对多个Controller对象做拦截
			b、一个项目中可以有零个或多个拦截器，他们在一起来拦截用户的请求
			c、拦截器常用在用户的登陆处理、权限检查、记录日志等方面
		4）拦截器使用步骤：
			a、定义类实现HandlerInterceptor接口
			b、在SpringMVC的配置文件中，声明拦截器
		5）拦截器的执行时间：
			a、在请求处理之前，也就是在Controller类中的方法（控制器方法）执行之前
			b、在控制器方法执行后也会执行拦截器
			c、在请求处理完成后也会执行拦截器
		6）HandlerInterceptor接口：
			1）public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception：
				a、参数：
					1）Object handler ：被拦截的控制器对象
				b、返回值boolean：
					true：请求通过了拦截器的验证，可以去执行控制器方法
					false：请求没有通过拦截器的验证，请求被截断，不会被处理
				c、特点：
					1）该方法在控制器方法执行前执行，用户的请求会首先到达这个方法
					2）在这个方法中可以获取请求的信息，验证请求是否符合要求（验证登录合法性、用户的权限），如果验证失败，可以截断请求，
						请求不会被处理；验证成功后才会被处理
					3）preHandle叫做预处理方法，是整个项目的入口，门户。
			2）public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception：
				a、参数：
					1）Object handler：被拦截的控制器对象
					2）ModelAndView modelAndView：控制器方法的返回值
				b、特点：
					1）在控制器方法执行后执行
					2）能够获取到控制器方法的返回值，可以修改这个返回值，可以影响到最后的执行结果
					3）主要是可以对原来的执行结果进行二次修正
			3）public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception：
				a、参数
					1）Object handler：被拦截的控制器对象
					2）Exception ex：程序中发生的异常
				b、特点：
					1）在请求处理结束后（当视图处理完成后，也就是对视图进行了forward操作）执行
					2）一般在这里做资源回收工作（在程序的请求处理过程中创建了一些对象，可以在这里进行删除，把占用的内存回收）
		7）拦截器可以看作是多个Controller中的功能集中到一个地方实现（AOP思想的典型体现）
		8）多个拦截器在框架中存放在一个List集合中，按照声明的顺序存放在集合中，所以先声明的先执行
			例如：两个拦截器：
				a、两个拦截器的preHandle()方法返回值都为true
					MyInterception------------>preHandle
					SecondInterceptor----------->preHandle
					SecondInterceptor-------->postHandle
					MyInterception----------->postHandle
					SecondInterceptor----------->afterCompletion
					MyInterception----------->afterCompletion
				b、MyInterception的preHandle()返回true,SecondInterception的preHandle()返回false
					MyInterception------------>preHandler
					SecondInterceptor----------->preHandle
					MyInterception----------->afterCompletion          //因为MyInterception的preHandle()返回值为true所以afterCompletion一定会执行
				c、MyInterception的preHandle()返回false,SecondInterception的preHandle()返回true或者false
					MyInterception------------>preHandle
	
	4、拦截器和过滤器的区别：
		1）过滤器是Servlet规范中的对象，拦截器是框架定义的对象
		2）过滤器是实现Filter接口，拦截器实现HandlerInterceptor接口
		3）过滤器用来设置request、response的参数、属性，侧重对数据进行过滤；拦截器是用来验证请求的，能够截断请求
		4）过滤器是在拦截器之前执行的
		5）过滤器是Tomcat服务器创建的对象，拦截器是SpringMVC框架创建的对象
		6）过滤器是一个执行时间点，而拦截器有三个执行时间点
		7）过滤器可以处理jsp、js、html等等，拦截器是侧重拦截Controller对象，如果你的请求不能被DispatcherServlet接收，
			这个请求就不会被拦截器处理
			
	5、SpringMVC中请求的处理过程：
		1）用户发起请求
		2）DispatcherServlet（中央调度器）接收请求
		3）DispatcherServlet将请求转交给处理器映射器，处理器映射器可以根据请求从容器中拿到处理器对象，
			将这个对象存放在处理器执行链（HandlerExecutionChain:类，拦截器对象也存放在这里）中
			处理器映射器：
				SpringMVC框架中的一种对象，框架把实现了HandlerMapping接口的类都叫做映射器
		4）DispatcherServlet将HandlerExecutionChain中的处理器对象交给处理器适配器对象（多个）
			处理器适配器：
				实现了HandlerAdapter接口的类
				作用：执行处理器方法
		5）DispatcherServlet将处理器方法返回的ModelAndView对象交给视图解析器,视图解析器对象：InternalResourceViewResolver
			InternalResourceViewResolver会创建InternalResourceView对象，InternalResourceView对象中有一个属性：url=xxxx/xxx/xx.jsp
			视图解析器：
				实现了ViewResolver接口的类
				作用：组成视图的完成路径，使用前缀和后缀，并创建View对象，View是一个接口，表示视图。在框架中的jsp、html不是用String表示的，而是用
					视图表示的
		6）DispatcherServlet把InternalResourceView对象获取到调用View类中的方法，把Model中的数据，放入到request作用域对象中，执行对象的forward，
			完成请求
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	