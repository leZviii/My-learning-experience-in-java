	1、@Value：简单类型的属性赋值
		a、属性：value是String类型的，表示简单类型的属性值
		b、位置：
			1）在简单类型属性定义的上边，无需set方法
			2）在set方法的上边
	2、@Autowired：Spring框架提供的注解，实现引用类型的赋值，使用了自动注入原理（支持byName、byType），默认使用byType规则
		属性：required：true/false
			true（默认值）：引用类型赋值失败时，程序包错并终止执行，建议使用
			false：引用类型赋值失败时，程序正常执行，引用类型赋值为null
		位置：
			1）属性定义的上面（无需set方法）
			2）在set方法的上面
	3、@Qualifier：和@Autowired连用，表示自动注入使用的规则
		属性：value：String类型的，bean的id，表示对象的名称，表示按名称完成赋值
		位置：在@Autowired下面
	4、@Resource：是JDK提供的注解，Spring也支持，功能和@Autpwired一样
		属性：不带参数时，默认是byName方式，当按照byName无法完成赋值时，会自动按照byType方式赋值；当带有参数name=“byName”时，会只使用byName方式赋值
		位置：
			1）属性定义的上面（无需set方法）
			2）在set方法的上面
	5、也可以使用${}的方式来写注解中的value值，此时需要配置文件，并且要在Spring的配置文件中声明配置文件的路径
		1）写好配置文件application.properties
		2）在Spring的配置文件中声明配置文件的路径
			<context:property-placeholder location="classpath:application.properties"/>
	6、动态代理
		a、实现方式：
			1）JDK动态代理：使用JDK中的Proxy（类）、Method（类）、InvocationHandler（接口）来创建代理对象，要求目标类必须实现接口
			2）CGLIB动态代理：第三方的一个工具库，创建代理对象，原理是继承，通过继承这个目标类，创建一个子类，这个子类就是代理对象。CGLIB要求目标类不能是final修饰的
		b、作用：
			1）在代码不改动的情况下，实现功能的增强
			2）减少代码的重复
			3）专注业务逻辑，不需要考虑其他
			4）解耦合，让业务功能和非业务功能分离
	7、AOP（面向切面编程）：是基于动态代理的，可以使用JDK和CGLIB。AOP就是动态代理的规范化
	8、AOP（Aspect Orient Programming）：
		a、Aspect：切面，给你的目标类增加的功能就是切面
		b、Orient：面向、朝向
		c、Programming：编程
	9、AOP的常用术语：
		a、Aspect：切面，表示增强的功能，就是一堆代码，完成某个功能，一般是非业务功能，常见的切面功能有：日志、事务、统计数据（信息）、参数检查、权限验证
		b、JoinPoint：连接点，链接业务方法和切面的位置，就是某个类中的业务方法
		c、PointCut：切入点，指多个连接点方法的结合。多个方法
		d、目标对象：给哪个类中的方法增加功能，这个类就是目标对象
		e、Advice：通知，通知表示切面功能执行的时间
	10、切面的三要素：
		a、切面的代码功能
		b、切面的执行位置，使用PointCut表示切面的位置
		c、切面的执行时间，使用Advice表示时间，在目标方法之前，还是在目标方法之后
		
	11、AOP的实现
		a、AOP是一个规范，是动态代理的一个规范化（一个标准）
		b、AOP的实现框架：
			1）Spring：Spring在内部实现了AOP规范，能做AOP的工作
				Spring主要在做事务处理的时候使用AOP，我们在项目开发的时候很少使用Spring内部的AOP（比较笨重）
			2）AspectJ：是一个开源的专门做AOP的框架（使用最广泛）。Spring框架中已经集成了AspectJ框架，通过Spring就可以直接使用AspectJ框架
				AspectJ实现AOP有两种方式：
					a、使用xml的配置文件，配置全局事务
					b、使用注解，我们在项目中一般使用注解实现AOP功能。AspectJ有5个注解
	
	12、AspectJ的使用：
		a、切面的执行时间，这个执行时间在规范中叫做Advice(通知、增强)
			在AspectJ使用注解表示Advice（也可以使用xml文件中的标签）：
				1)@Befroe
				2)@AfterReturning
				3)@Around
				4)@AfterThrowing
				5)@After
		b、切面执行的位置，使用的是切入点表达式
			execution(访问权限 方法返回值 方法声明（参数） 异常类型)
			其中方法返回值和方法声明是必须的
			符号	意义
			*		0至多个任意字符
			..		用在方法参数中，表示任意多个参数；用在包名后，表示其当前包和其子包的路径
			+		用在类名后，表示当前类及其子类；用在接口后，表示当前接口及其实现类
			例如：
				execution(public * *(..))
				指定切入点为：任意公共方法
				execution(* set*(..))
				指定切入点为：任意一个以"set"开始的方法，返回值为"*"任意类型
				execution(* com.leviii.service.*.*(..))
				指定切入点为：com.leviii.service包中任意类的任意方法
				execution(* com.leviii.service..*.*(..))
				指定切入点为：com.leviii.service包及其子包中任意类的任意方法
				execution(* *..service..*.*(..))
				指定切入点为：包含service包及其子包的所有包中的service包及其子包中的任意类的任意方法
		c、AspectJ实现AOP的步骤：
			1）新建maven项目
			2）加入依赖：
				a、Spring依赖
				b、AspectJ依赖
				c、Junit单元测试依赖
			3）创建目标类：接口和他的实现类
			4）创建切面类：普通类
				a、在类的上面加入@Aspect
				b、在类中定义方法，这个方法就是切面需要执行的功能，在方法的上面加入AspectJ的通知注解（@Before...),如果有需要，
				还要指定切入点表达式execution()
			5）创建Spring的配置文件，声明对象，把对象交给Spring统一管理，可以使用注解或者xml文件的<bean>标签方式
				a、声明目标对象
				b、声明切面类对象
				c、声明AspectJ框架中的自动代理生成器标签
			6）创建一个测试类，从Spring容器中获取目标对象（实际上就是代理对象），通过代理执行方法，实现AOP的功能增强
	
	13、@Aspect：
		作用：表示当前的类是一个切面类
		切面类：是用来给业务方法增加功能的类，在这个类中有切面的功能代码
		位置：在类定义的上面
	
	14、在切面类中定义前置通知方法：
		1）公共方法 public
		2）方法没有返回值
		3）方法名称自定义
		4）方法可以有参数，也可以没有参数；如果有参数，参数不是自定义的，有几个固定的类型可以使用
	
	15、@Before：
		作用：前置通知注解
		属性：value，值是切入点表达式，表示切面的功能执行的位置
		位置：方法的上面
		特点：
			1）在目标方法之前先执行
			2）不会改变目标方法的执行结果
			3）不会影响目标方法的执行
	
	16、声明自动代理生成器：使用AspectJ框架内部的功能，创建目标对象的代理对象。创建目标类的代理对象是在内存中实现的，修改目标
		对象中的内存结构，创建代理对象。
		<aop:aspectj-autoproxy/>：会把Spring容器中所有的目标对象一次性地都生成代理对象
				
		
	17、@JoinPoint：
		作用：业务方法，要加入切面功能的业务方法，可以在其通知的方法中获取目标方法执行时的信息，例如方法名称、方法的实参。
		这个JoinPoint的值是由AspectJ框架赋予的
		位置：方法的第一个参数
		
	18、在切面类中定义后置通知方法：
		1）公共方法 public
		2）方法没有返回值
		3）方法名称自定义
		4）方法是有参数的，推荐是Object，参数名自定义
	
	19、@AfterReturning：
		作用：后置通知注解
		属性：
			value，值是切入点表达式
			returning：自定义的变量，表示目标方法的返回值，自定义的变量名必须和通知方法的形参名一样
		位置：在方法定义的上面
		特点：
			1）在目标方法之后执行
			2）能够获取到目标方法的返回值，可以根据这个返回值做不同的处理功能
			3）可以修改这个返回值
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		